{"meta":{"title":"小郁的博客","subtitle":"","description":"欢迎来到小郁的博客","author":"小郁","url":"https://ccit18081430224.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-04-01T08:22:49.000Z","updated":"2020-04-16T13:22:56.434Z","comments":true,"path":"categories/index.html","permalink":"https://ccit18081430224.github.io/categories/index.html","excerpt":"","text":"var gitment = new Gitment({id: 'location.href', owner: 'ccit18081430224', repo: 'https://ccit18081430224.github.io/', oauth: { client_id: '8ec8741929a9cb7081cb', client_secret: 'a1d3dbd04d3ae6f9cb59d6b6ffba3d2a2f27f9cb', }, })gitment.render('container')"},{"title":"guestbook","date":"2020-04-09T10:44:00.000Z","updated":"2020-04-09T10:45:13.070Z","comments":true,"path":"guestbook/index.html","permalink":"https://ccit18081430224.github.io/guestbook/index.html","excerpt":"","text":""}],"posts":[{"title":"关于读写特性","slug":"关于读写特性","date":"2020-06-21T10:06:50.000Z","updated":"2020-06-21T10:41:12.526Z","comments":true,"path":"2020/06/21/关于读写特性/","link":"","permalink":"https://ccit18081430224.github.io/2020/06/21/%E5%85%B3%E4%BA%8E%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/","excerpt":"上次介绍了介绍了BBC 板子的服务特性，这次咱们来介绍她的读写特性","text":"上次介绍了介绍了BBC 板子的服务特性，这次咱们来介绍她的读写特性 关于读写特性首先要来添加一个读取的函数部分代码如下 12345678910111213141516171819202122232425262728293031323334function readModelNumber()//读 &#123; console.log(\"readModelNumber\"); //state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service \"); return; &#125; if (!has_model_number_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic \"); return; &#125; model_number_string.readValue() .then(value =&gt;&#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt;&#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; 然后再添加一个关于写特性的函数来控制LED小灯的变化部分代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142function randomLEDs() &#123; console.log(\"randomLEDs\"); if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array = [0, 0, 0, 0, 0]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; 最后添加相关的提示或按钮 1234567&lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Read Characteristic - Model Number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model Number&lt;/button&gt; &lt;div id=\"model_number\"&gt;&lt;/div&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs()\"&gt;Randomise LEDs&lt;/button&gt; 这样我们打开文件，网页上就会是这个样子 然后我们点击 Read Model Number 按钮 就会出现 此时我们再点击Randomise LEDS 网页的代码会变成 并且BBC板子上面的等也会出现变化再次点击Randomise LEDS，板子上又会变成(LED的变化是随机的哦，我这里只拍了几张)","categories":[],"tags":[]},{"title":"关于服务特性","slug":"关于服务性","date":"2020-06-19T02:53:45.000Z","updated":"2020-06-19T10:08:52.947Z","comments":true,"path":"2020/06/19/关于服务性/","link":"","permalink":"https://ccit18081430224.github.io/2020/06/19/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E6%80%A7/","excerpt":"上次咱们连接了BBC的板子，那我们这次就来了解一下这个板子还有一些什么特性呢","text":"上次咱们连接了BBC的板子，那我们这次就来了解一下这个板子还有一些什么特性呢 关于服务、特性我们在用谷歌浏览器连接蓝牙设备时可以看到它的服务特性（关于用谷歌浏览器看蓝牙是否连接我已经在上篇博客中写过了，感兴趣的可以翻一翻戳我用谷歌浏览器查看） 连接上蓝牙之后我们可以看到属于这块板子的Service有8个 每个服务都有属于自己编码这个编码就叫UUID，我们想控制小灯的亮灭，就要找到和小灯亮灭相关的服务和特性例如戳我看服务、特性的UUID我们如果想用led就要找到相应的服务和特性，然后姜代表它的UUID放到代码里调用 123456789101112131415161718192021222324252627//服务或者特性是否存在var has_accelerometer_service = false;var has_accelerometer_data = false ;var has_led_service = false;var has_led_matrix_state = false;var has_device_information_service = false;var has_model_name_string = false;//services uuidACCELEROMETER_SERVICE = 'E95D0753251D470AA062FA1922DFA9A8';LED_SERVICE = 'E95DD91D251D470AA062FA1922DFA9A';DEVICE_INFORMATION_SERVICE = '0000180A00001000800000805F9B34FB';// characteristic UUIDsACCELEROMETER_DATA = 'E95DCA4B251D470AA062FA1922DFA9A8';LED_MATRIX_STATE= 'E95D7B77251D470AA062FA1922DFA9A8';MODEL_NUMBER_STRING = '00002A2400001000800000805F9B34FB';// cached characteristics var led_matrix_state;var model_number_string ;var accelerometer_data ;var service_count ; var services_discovered;var characteristics_discovered;var characteristic_count; 然后再在我们代码里调用这些服务或者特性，通过我们的网页和BBC板体现出来 部分代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869function discoverSvcsAndChars() &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; services_discovered = 0; services_count = services.length; console.log(\"Got \" + service_count + \"services\"); services.forEach(service =&gt; &#123; if(service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true ; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if(service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if(characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if(characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if(characteristic.uuid == MMODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(services_discovered == services_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); &#125; &#125; ); &#125; ); &#125;); &#125;); &#125; 然后，点击扫描，就会发现表格里的两个false都变成了true，BBC板子也会出现C,并且在右边会出现Got 3 services点击断开，两个false会变回来，板子上也会出现D 关于温度了解了BBC板子相关的特性之后，就可以给他添加相应的服务，例如温度：首先我们在下载固件到BBC板子时可以发现有关温度的设计程序已经被写好等着我们下载 戳我了解更多小程序点击编辑 然后讲 蓝牙温度服务 拖到 当开机时 的后面，点击下载。 然后，添加相应代码 部分代码如下 123ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8';ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb';TEMPERATURE = 'e95d9250-251d-470a-a062-fa1922dfa9a8'; 并且板子上出现C 就大功告成啦","categories":[],"tags":[]},{"title":"关于连接micro:bit","slug":"关于连接micro-bit","date":"2020-06-16T02:14:18.000Z","updated":"2020-06-17T09:30:34.134Z","comments":true,"path":"2020/06/16/关于连接micro-bit/","link":"","permalink":"https://ccit18081430224.github.io/2020/06/16/%E5%85%B3%E4%BA%8E%E8%BF%9E%E6%8E%A5micro-bit/","excerpt":"关于micro:bit","text":"关于micro:bit 关于准备工作工欲善其事必先利其器，首先我们要完善一下自己的“装备” 首先我们要确认自己的电脑上是否有蓝牙装备 方法：1.可以直接在电脑的搜索框里搜索，看是否有蓝牙设备 2.可以在在谷歌浏览器中输入 chrome://bluetooth-internals检查 检查本机系统是否在 windows 10的1703级以上 可以用：win+r打开winver窗口查看 检查谷歌浏览器是否在70.0.3526.0及以上版本 关于连接准备工作做好之后就可以讲BBC板子与我们的电脑链接起来了 新建一个html文件（代码如下：） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;html&gt;&lt;head&gt;&lt;script&gt; var selected_device; //保存用户选择的蓝牙设备 var connected_server; //保存用户链接的蓝牙设备 function discoverDevices() &#123; console.log(\"discoverDevices\"); var options = &#123;acceptAllDevices:true&#125; navigator.bluetooth.requestDevice(options) .then(device =&gt;&#123; console.log ('&gt; Name:' + device.name); console.log ('&gt; ID:' + device.id); console.log ('&gt; Connected:' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) . catch(error =&gt; &#123; alert('ERROR:' +error); console.log(' ERROR:' + error); &#125;); &#125; function connect() &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function(server) //表示链接成功 &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected=\" + server.connected); connected_server = server; &#125;, function (error) //表示链接失败 &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error) &#125; ) &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt; Device Discovery &lt;/h2&gt; &lt;button id=\"btn_scan\" onclick=\"discoverDevices()\"&gt; Start scan &lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 用谷歌浏览器打开这个文件，点击 Start scan 按钮 弹出对话框点击配对 配对成功之后浏览器中会出现 Connect=true 和蓝牙标志 另外你的BBC小板子会出现一个C 这样就连接成功啦~~ 如果在浏览器中没有出现结果，或者出现错误可点击F12查看代码 关于进一步完善构造一个可以显示蓝牙当前连接状态的函数function，函数如下 12345678910111213function setConnectedStatus(status) //设置电脑蓝牙当前的状态 &#123; connected = status; document.getElementById('status_connected').innerHTML = status; if(status == true ) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; 并在body部分添加一个用来显示的一列两行表格 12345678910111213&lt;h2&gt; Status &lt;!--显示蓝牙状态--&gt; &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;!--表格第一行--&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!--表格第二行--&gt; &lt;td id=\"status_connected\"&gt;false&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 这个时候打开浏览器,就会发现多了个表格 点击 Start scan就会发现 Connected那个地方由false变成了true，最底下的按钮由链接按钮变成了断开的功能按钮并且板子上出现字母C 关于断开上一步弄好之后，我们只是有了断开的按钮（Disconnect），但是当我们按下去这个按钮时，却没有反应，所以我们要添加一个控制断开的函数 12345678910function discoverOrdisconnectDevices() &#123; console.log(\"discoverDevicesOrDisconnect\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); //断开连接 &#125; &#125; 这时配对之后点击断开按钮（Disconnect），BBC板子上就会出现字母 D 并且网页上显示是否连接的地方会变成False","categories":[],"tags":[]},{"title":"关于图片","slug":"关于图片","date":"2020-05-23T09:27:48.000Z","updated":"2020-05-23T10:08:59.818Z","comments":true,"path":"2020/05/23/关于图片/","link":"","permalink":"https://ccit18081430224.github.io/2020/05/23/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87/","excerpt":"博文上传上去了，只有文字，未免干巴巴的，让人没有想看下去的欲望。所以我们要给我们的博文配上相应的图片，使它图文并茂","text":"博文上传上去了，只有文字，未免干巴巴的，让人没有想看下去的欲望。所以我们要给我们的博文配上相应的图片，使它图文并茂 关于图片我这里用的是七牛云 我们先注册一个七牛云账号，然后登录，进入管理控制台 2. 添加对象存储 因为我这里是申请过了的，所以提示不可以的哦，你们可以起一个自己的名字3. 点击上传文件 4. 上传进度到100%之后，点击刷新。这时候会出现你上传的那张图，然后点击更多，最后点击复制外链。 5. 把刚刚复制的外链粘贴到写博文的编辑器里来 *注：一定是英文状态下的 !+[] +() * 图片上传成功啦，我们的博客终于有图片啦~","categories":[],"tags":[]},{"title":"关于博文","slug":"关于博文","date":"2020-05-12T13:16:27.000Z","updated":"2020-05-13T09:31:02.225Z","comments":true,"path":"2020/05/12/关于博文/","link":"","permalink":"https://ccit18081430224.github.io/2020/05/12/%E5%85%B3%E4%BA%8E%E5%8D%9A%E6%96%87/","excerpt":"装饰好了之后，我们需要写一些内容来填充博客","text":"装饰好了之后，我们需要写一些内容来填充博客 关于编辑器常见的编辑器：typora、vicode、vim等，你可以根据自己的需求下载使用我用的是typora 这是一个所见及所得的编辑器，支持window、Linux、mac系统这里有详细介绍戳这里 关于markdown有了编辑器，我们就要用他们能识别的语言——markdown 来编写 下面简单介绍一下常用的几个 标题 #（几级标题就几个#，一共六级。#后面一定要加空格） 引用：引用内容前面加&gt;，即可 图片：!+[]+() 链接:[]+()","categories":[],"tags":[]},{"title":"关于美化","slug":"关于美化","date":"2020-05-12T08:44:18.000Z","updated":"2020-05-13T13:51:31.473Z","comments":true,"path":"2020/05/12/关于美化/","link":"","permalink":"https://ccit18081430224.github.io/2020/05/12/%E5%85%B3%E4%BA%8E%E7%BE%8E%E5%8C%96/","excerpt":"我们的博客乔迁好之后，我们发现他还是一如既往的丑，这个时候我们就可以给我们的博客装饰一下","text":"我们的博客乔迁好之后，我们发现他还是一如既往的丑，这个时候我们就可以给我们的博客装饰一下 关于主题 hexo有三百多个自带主题 我们可以根据个人喜好，下载安装自己喜欢的主题。（我这里用的是next） 打开blog文件夹下的thmes文件夹，git bash here 将主题克隆到主题文件夹下 git clone +主题链接（上图箭头所指链接） 注：时间可能会有点长，因为网速的原因可能不会一次就成功，所以不要着急慢慢来 主题下载好之后，将根目录下的配置文件 _config.yml 中的主题节点修改成你使用的主题（和你保存主题的文件夹名字要一致 hexo clean hexo g hexo d 这样你的主题就安装上去了，别人可以在你的博客看见啦 添加头像 打开主题文件夹下的配置文件（ themes/next/_config.yml 文件），搜索 Sidebar Avatar 关键字，去掉 avatar 前面的#： #Sidebar Avatar #in theme directory(source/images): /images/avatar.jpg #in site directory(source/uploads): /uploads/avatar.jpg avatar: http://example.com/avatar.png 或者使用本地图片,把图片放入 themes/next/source/images 下,修改avatar： avatar: /images/avatar.gif 名字和语言打开根目录下的配置文件你可以按照自己的喜好配置 （注：语言要根据你主题文件夹下的语言文件夹填写） 这样一个有头像、有名字的博客就出来啦~4. 打开next/layout/_layout.swig 文件，在L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});之前添加 12345&#123;% if theme.canvas_nest %&#125;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt;&#123;% endif %&#125; 再打开主题文件的配置文件，在最后添加 123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.jscanvas_nest: true 然后hexo clean，hexo g，hexo d就拥有了一个酷炫的动态背景啦 关于插件 因为我喜欢简洁的页面，所以我没有用太多小插件。这里只简单介绍一下我使用的几个小插件 关于音乐 我用的音乐插件是网易云音乐，打开网易云搜所你喜欢的音乐然后选择 iframe插件，复制代码然后打开相对应的配置文件（我的配置文件是在主题文件夹下的layout_macro中的 siderbar.swig 文件），根据你的喜好放在相应的地方。 关于评论 现在市面上又好多插件可以给hexo添加评论板块，我这里用的是Valine首先要注册一个Leanclound账号，注册完之后创建一个应用，名字可以随便起，然后进入应用 →设置 →应用key获取你的 appid 和 appkey然后再进入安全中心 →Web安全域名 把你的域名放进去 最后将你的 appid 和 appkey 粘贴到主题配置文件 valine 节点下 这样就可以啦，欢迎大家留言哦~ 12","categories":[],"tags":[]},{"title":"关于乔迁","slug":"关于部署","date":"2020-05-12T03:26:47.000Z","updated":"2020-05-12T09:15:03.377Z","comments":true,"path":"2020/05/12/关于部署/","link":"","permalink":"https://ccit18081430224.github.io/2020/05/12/%E5%85%B3%E4%BA%8E%E9%83%A8%E7%BD%B2/","excerpt":"本地博客是只有在我们自己电脑上才能看的 怎么才能让别人看到自己的博客呢？这时候我们就要给博客换个新家 将博客乔迁到GitHub上","text":"本地博客是只有在我们自己电脑上才能看的 怎么才能让别人看到自己的博客呢？这时候我们就要给博客换个新家 将博客乔迁到GitHub上 什么是GitHub？ GitHub是通过Git进行版本控制的软件源代码托管服务，由GitHub公司的使用Ruby on Rails编写而成。用户可以免费创建公开的代码仓库 乔迁部署 我们首先要注册一个自己的GitHub账号 创建仓库 注册登录后，会有一个 新建 ,点击 new 创建一个和你用户名相同的仓库，用户名后面要加 .github.io ，以后将博客部署到GitHub页面时，才会被识别 (我这里时已经注册过了) 点击 Creat repository 创建仓库 生成SSH密钥 打开 git bash 输入 git config –global user.name “yourname”git config –global user.email “youremail” (这里的”yourname”和”youremail”都是你注册GitHub时的信息) 然后再输入 ssh-keygen -t rsa -C “youremail” 一直next ，直到生成一个叫 .ssh 的文件夹 将生成的SSH密钥添加到GitHub ​ 在电脑中找到 .ssh 文件夹 然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去 5.将hexo部署到GitHub上 打开站点配置文件 _config.yml ，将这个文件的最后部分修改成 deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master （冒号后面一定要有个空格！！！）文件配置好之后输入部署命令 npm install hexo-deployer-git –save （部署过程中可能会要你输入GitHub的用户名和密码） 最后 hexo clean（清除你之前生成的东西）hexo g （是hexo generate 的简写，生成静态文章）hexo d （是hexo deploy鹅简写，部署文章） 就会得到你的个人域名你的博客就成功部署到GitHub上啦 通过 https://yourname.github.io 就可以查看啦","categories":[],"tags":[]},{"title":"关于搭建","slug":"关于搭建","date":"2020-05-07T08:43:56.000Z","updated":"2020-05-12T09:15:19.126Z","comments":true,"path":"2020/05/07/关于搭建/","link":"","permalink":"https://ccit18081430224.github.io/2020/05/07/%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BA/","excerpt":"如果想要别人看到你的博客，首先你要在你自己的电脑上看见。所以我们先进行本地搭建","text":"如果想要别人看到你的博客，首先你要在你自己的电脑上看见。所以我们先进行本地搭建 搭建hexo想要做一个属于自己的博客，首先我们要搭建一个HEXO 下载NODE.js 安装步骤：一直next就行，没有啥特殊要求 在cmd窗口输入 node -v 验证，出现版本号即为成功 继续输入 npm -v 安装npm 下载git 安装步骤：也一直next cmd窗口下输入 git 检验是否安装成功 （可以在camd窗口下输入 npm congig set registry http://registry.npm.taobao.org/ 下载淘宝镜像 提升访问速度下） 完成上面两步之后就可以安装hexo了 在cmd窗口下输入输入 npm install hexo-cli -g （安装时间可能有点长，请耐心等待） 在本地搭建开始之前我们还需要做最后一步准备工作——创建一个用来放置关于博客资源和博文的文件夹 继续在cmd窗口下输入 md blog 就可以在当前路径下创建一个名叫blog的文件夹 （如果遇到什么实在解决不了的问题，我们可以讲这个文件夹直接删除从新开始（虽然很粗暴，但是很有用）） 准备就绪，我们首先输入 cd blog 进入到刚才新建的文件夹 然后输入 hexo init 耐心等待初始化 最后输入 hexo s 会出现 &gt; 将 http://localhost:4000 复制粘贴到浏览器中就会出现 ![](http://q9yccga3b.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E5%8C%96.png) 这样我们博客的本地搭建就完成啦~","categories":[],"tags":[]},{"title":"图片","slug":"图片","date":"2020-04-01T11:48:29.483Z","updated":"2020-04-16T13:29:10.961Z","comments":true,"path":"2020/04/01/图片/","link":"","permalink":"https://ccit18081430224.github.io/2020/04/01/%E5%9B%BE%E7%89%87/","excerpt":"","text":"[] var gitment = new Gitment({id: 'location.href', owner: 'ccit18081430224', repo: 'https://ccit18081430224.github.io/', oauth: { client_id: '8ec8741929a9cb7081cb', client_secret: 'a1d3dbd04d3ae6f9cb59d6b6ffba3d2a2f27f9cb', }, })gitment.render('container')","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-01T03:06:39.601Z","updated":"2020-03-01T03:06:39.603Z","comments":true,"path":"2020/03/01/hello-world/","link":"","permalink":"https://ccit18081430224.github.io/2020/03/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}